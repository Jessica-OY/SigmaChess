import pygame
import chess
import chess.svg
import os

class PygameChessUI:
    def __init__(self):
        """初始化Pygame窗口"""
        pygame.init()
        self.SQUARE_SIZE = 50
        self.BOARD_SIZE = self.SQUARE_SIZE * 8
        self.INFO_PANEL_HEIGHT = 50
        self.WINDOW_SIZE = (self.BOARD_SIZE, self.BOARD_SIZE + self.INFO_PANEL_HEIGHT)
        self.screen = pygame.display.set_mode(self.WINDOW_SIZE)
        pygame.display.set_caption("Chess Game")
        
        # 初始化字体
        pygame.font.init()
        self.font = pygame.font.SysFont('Arial', 20)
        
        # 用于存储选中的格子和错误信息
        self.selected_square = None
        self.error_message = ""
        
        # 创建临时文件目录
        self.temp_dir = os.path.join(os.getcwd(), "temp")
        if not os.path.exists(self.temp_dir):
            os.makedirs(self.temp_dir)

    def draw_board(self, board, error_message=""):
        """绘制棋盘和棋子"""
        self.error_message = error_message
        
        # 将棋盘转换为SVG格式
        svg = chess.svg.board(board=board, size=self.BOARD_SIZE)
        svg_path = os.path.join(self.temp_dir, "temp.svg")
        png_path = os.path.join(self.temp_dir, "temp.png")
        
        try:
            with open(svg_path, "w") as f:
                f.write(svg)
            
            # 将SVG转换为PNG
            import cairosvg
            cairosvg.svg2png(url=svg_path, write_to=png_path)
            
            # 加载并显示PNG图像
            image = pygame.image.load(png_path)
            self.screen.blit(image, (0, 0))
        except Exception as e:
            print(f"Error drawing board: {e}")
        
        # 如果有选中的格子，绘制高亮
        if self.selected_square is not None:
            x = (self.selected_square % 8) * self.SQUARE_SIZE
            y = (self.selected_square // 8) * self.SQUARE_SIZE
            highlight = pygame.Surface((self.SQUARE_SIZE, self.SQUARE_SIZE))
            highlight.fill((255, 255, 0))
            highlight.set_alpha(128)
            self.screen.blit(highlight, (x, y))
        
        # 绘制游戏状态信息
        self.draw_game_info(board)
        
        pygame.display.flip()

    def draw_game_info(self, board):
        """绘制游戏状态信息"""
        # 清空信息面板区域
        info_panel = pygame.Surface((self.BOARD_SIZE, self.INFO_PANEL_HEIGHT))
        info_panel.fill((200, 200, 200))
        self.screen.blit(info_panel, (0, self.BOARD_SIZE))
        
        # 显示当前玩家
        current_player = "White" if board.turn else "Black"
        text = self.font.render(f"Current Player: {current_player}", True, (0, 0, 0))
        self.screen.blit(text, (10, self.BOARD_SIZE + 5))
        
        # 显示错误信息
        if self.error_message:
            error_text = self.font.render(self.error_message, True, (255, 0, 0))
            self.screen.blit(error_text, (10, self.BOARD_SIZE + 25))
        
        # 如果游戏结束，显示结果
        if board.is_game_over():
            result = "1-0" if board.is_checkmate() and not board.turn else "0-1" if board.is_checkmate() else "1/2-1/2"
            text = self.font.render(f"Game Over: {result}", True, (255, 0, 0))
            self.screen.blit(text, (200, self.BOARD_SIZE + 15))

    def handle_mouse_click(self, event):
        """处理鼠标点击事件"""
        if event.button == 1:  # 左键点击
            x, y = event.pos
            if y < self.BOARD_SIZE:  # 确保点击在棋盘范围内
                square = (y // self.SQUARE_SIZE) * 8 + (x // self.SQUARE_SIZE)
                if self.selected_square is None:
                    self.selected_square = square
                    return None
                else:
                    move_from = self.selected_square
                    move_to = square
                    self.selected_square = None
                    # 返回UCI格式的走法字符串
                    from_file = chr(ord('a') + (move_from % 8))
                    from_rank = str(8 - (move_from // 8))
                    to_file = chr(ord('a') + (move_to % 8))
                    to_rank = str(8 - (move_to // 8))
                    return f"{from_file}{from_rank}{to_file}{to_rank}"
        return None

    def show_game_over(self, result):
        """显示游戏结束信息"""
        text = self.font.render(f"Game Over: {result}", True, (255, 0, 0))
        text_rect = text.get_rect(center=(self.BOARD_SIZE // 2, self.BOARD_SIZE + self.INFO_PANEL_HEIGHT // 2))
        self.screen.blit(text, text_rect)
        pygame.display.flip()
        
    def cleanup(self):
        """清理临时文件"""
        try:
            for file in os.listdir(self.temp_dir):
                file_path = os.path.join(self.temp_dir, file)
                try:
                    if os.path.exists(file_path):
                        os.remove(file_path)
                except Exception as e:
                    print(f"Error cleaning up {file_path}: {e}")
            if os.path.exists(self.temp_dir):
                os.rmdir(self.temp_dir)
        except Exception as e:
            print(f"Error removing temp directory: {e}")
        finally:
            pygame.quit()
